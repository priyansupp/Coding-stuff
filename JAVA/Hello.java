// Java is compiled then interpreted.

// The JVM starts the java program by calling the main method(can only be one) present in one of the classes.
// JVM looks for a public class and begins the program execution from the main function(which is static and hence that class need not be instantiated thus saving memory).
// File name should match the classname unless the class is not public(then it can be different).

// Compile time: javac Filename.java  => javac(java compiler) converts the java source code into bytecode(Classname.class)
// Runtime     : java Filename        => (Classfile -> Classloader -> Bytecode verified -> Interpreter(Read bytecode stream then execute the instructions.) -> Runtime(Getting executed) -> Hardware

// bytecode generated can run on any machine with the help of interpreter, hence java is platform independent.

// Will create Hello.class once compiled with javac
public class Hello {
    public static void main(String[] args) {
        System.out.println("Hello World!!");
    }
}

// Each public class should be declared in its own file with the same filename as the classname
/*public class Welcome {
    public static void main(String[] args) {
        System.out.println("Welcome World!!");
    }
} */

// Each class has its own bytecode file(Hello2.class) generated by the compiler
class Hello2 {
    // This main function will not be the one which starts the flow of the program
    public static void main(String[] args) {
        System.out.println("This is Hello2");
    }
}

